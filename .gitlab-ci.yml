image: $SKA_K8S_TOOLS_BUILD_DEPLOY

stages:
  - lint
  - build
  - test
  - deploy
  - integration
  - staging
  - pages
  - publish
  - scan

# Standardised included jobs
variables:
  GIT_SUBMODULE_STRATEGY: recursive

# Include CI templates
include:
# OCI Images
# do a custom set of build and publish stages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

# Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

# .post step finalisers eg: badges
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

# changelog release page
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/release.gitlab-ci.yml'

.image_builder_template:
  stage: build
  tags:
    - k8srunner
  before_script:
    - '[ -f .make/oci.mk ] || exit 1'
    - 'make help | grep oci-build'
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - echo $CAR_OCI_REGISTRY_PASSWORD | docker login -u $CAR_OCI_REGISTRY_USERNAME --password-stdin $CAR_OCI_REGISTRY_HOST
  script:
    - echo "Incoming BUILD_IMAGE=${BUILD_IMAGE} BASE_IMAGE=${BASE_IMAGE}"
    - |
      if [[ -n "${BUILD_IMAGE}" ]]; then
        IMG="${BUILD_IMAGE##*/}";
        VERS=$(make show-version RELEASE_CONTEXT_DIR=images/${IMG});
        export BUILD_IMAGE="${BUILD_IMAGE}:${VERS}";
      fi;
      if [[ -n "${BASE_IMAGE}" ]]; then
        IMG="${BASE_IMAGE##*/}";
        VERS=$(make show-version RELEASE_CONTEXT_DIR=images/${IMG});
        export BASE_IMAGE="${BASE_IMAGE}:${VERS}";
      fi;
    - echo "Image dependencies set to BUILD_IMAGE=${BUILD_IMAGE} BASE_IMAGE=${BASE_IMAGE}"
    - |
      echo "Check/pulling ${OCI_IMAGE} image to build:";
      export VERS=$(make show-version RELEASE_CONTEXT_DIR=images/${OCI_IMAGE});
      export IMG=${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/${OCI_IMAGE}:${VERS};
      echo "Image to build: ${IMG}"; docker pull ${IMG} || true;
    - make oci-build OCI_IMAGE=${OCI_IMAGE} CAR_OCI_REGISTRY_HOST=${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME} RELEASE_CONTEXT_DIR=images/${OCI_IMAGE} OCI_BUILD_ADDITIONAL_ARGS="--no-cache --build-arg BUILD_IMAGE --build-arg BASE_IMAGE "

oci-image-build:
  rules:
  - when: never

oci-image-build-ska-base:
  extends:
  - .image_builder_template
  variables:
    OCI_IMAGE: ska-base
    BASE_IMAGE: ubuntu:22.04

oci-image-build-ska-build:
  dependencies:
    - oci-image-build-ska-base
  extends:
  - .image_builder_template
  variables:
    OCI_IMAGE: ska-build
    BASE_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/ska-base

oci-image-build-ska-python:
  dependencies:
    - oci-image-build-ska-base
  extends:
  - .image_builder_template
  variables:
    OCI_IMAGE: ska-python
    BASE_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/ska-base

oci-image-build-ska-build-python:
  dependencies:
    - oci-image-build-ska-build
  extends:
  - .image_builder_template
  variables:
    OCI_IMAGE: ska-build-python
    BASE_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/ska-build