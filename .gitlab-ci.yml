image: $SKA_K8S_TOOLS_BUILD_DEPLOY

stages:
  - lint
  - build
  - test
  - deploy
  - integration
  - staging
  - pages
  - publish
  - scan
  - schedule

# Standardised included jobs
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  OCI_BUILD_ADDITIONAL_TAGS: ${CI_COMMIT_SHORT_SHA}
  UBUNTU_VERSION: "2204"
  UBUNTU_DISTRO: jammy
  CS_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/ska-base:${CI_COMMIT_SHORT_SHA}
  DOCS_RTD_PROJECT_SLUG: ska-telescope-ska-base-image

default:
  tags:
    - ska-k8s

# Include CI templates
include:
  # OCI Images
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/oci-image.gitlab-ci.yml"

  # Docs pages
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/docs.gitlab-ci.yml"

  # .post step finalisers eg: badges
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/finaliser.gitlab-ci.yml"

  # changelog release page
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/release.gitlab-ci.yml"

.image_builder_template:
  stage: build
  before_script:
    - "[ -f .make/oci.mk ] || exit 1"
    - "make help | grep oci-build"
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script: |
    # 
    if [[ -n "${BASE_IMAGE_NAME}" ]]; then
      export BASE_IMAGE_REGISTRY=${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/${BASE_IMAGE_NAME}
      export BASE_IMAGE=$BASE_IMAGE_REGISTRY
      echo "Using BASE_IMAGE=${BASE_IMAGE_REGISTRY}"
      VERSION=$(make show-version RELEASE_CONTEXT_DIR=images/${BASE_IMAGE_NAME})
      FULL_VERSION="${VERSION}-dev.c${CI_COMMIT_SHORT_SHA}"
      export BASE_IMAGE_REF="${BASE_IMAGE_NAME}:${VERSION}"
      export BASE_IMAGE="${BASE_IMAGE}:${FULL_VERSION}"
    fi

    echo "Image dependencies set to BASE_IMAGE=${BASE_IMAGE}"
    make oci-build OCI_IMAGE=${OCI_IMAGE} CAR_OCI_REGISTRY_HOST=${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME} RELEASE_CONTEXT_DIR=images/${OCI_IMAGE} OCI_BUILD_ADDITIONAL_ARGS="--no-cache --build-arg BASE_IMAGE=${BASE_IMAGE} --build-arg BASE_IMAGE_REF=${BASE_IMAGE_REF}"

.override-jobs-for-schedule:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - when: always

oci-image-lint:
  rules:
    - !reference [.override-jobs-for-schedule, rules]

docs-build-rtd:
  rules:
    - !reference [.override-jobs-for-schedule, rules]

container_scanning:
  rules:
    - !reference [.override-jobs-for-schedule, rules]

gemnasium-python-dependency_scanning:
  rules:
    - !reference [.override-jobs-for-schedule, rules]

create-ci-metrics:
  rules:
    - !reference [.override-jobs-for-schedule, rules]

oci-image-build:
  rules:
    - when: never

oci-image-build-ska-base:
  extends:
    - .image_builder_template
  rules:
    - !reference [.override-jobs-for-schedule, rules]
  variables:
    OCI_IMAGE: ska-base

oci-image-build-ska-build:
  needs:
    - oci-image-build-ska-base
  extends:
    - .image_builder_template
  rules:
    - !reference [.override-jobs-for-schedule, rules]
  variables:
    OCI_IMAGE: ska-build
    BASE_IMAGE_NAME: ska-base

oci-image-build-ska-node:
  needs:
    - oci-image-build-ska-base
  extends:
    - .image_builder_template
  rules:
    - !reference [.override-jobs-for-schedule, rules]
  variables:
    OCI_IMAGE: ska-node
    BASE_IMAGE_NAME: ska-base

oci-image-build-ska-node-build:
  needs:
    - oci-image-build-ska-node
  extends:
    - .image_builder_template
  rules:
    - !reference [.override-jobs-for-schedule, rules]
  variables:
    OCI_IMAGE: ska-node-build
    BASE_IMAGE_NAME: ska-node

oci-image-build-ska-node-test:
  needs:
    - oci-image-build-ska-node
  extends:
    - .image_builder_template
  rules:
    - !reference [.override-jobs-for-schedule, rules]
  variables:
    OCI_IMAGE: ska-node-test
    BASE_IMAGE_NAME: ska-node

oci-image-build-ska-webserver:
  needs:
    - oci-image-build-ska-node
  extends:
    - .image_builder_template
  rules:
    - !reference [.override-jobs-for-schedule, rules]
  variables:
    OCI_IMAGE: ska-webserver
    BASE_IMAGE_NAME: ska-node

oci-image-build-ska-python:
  needs:
    - oci-image-build-ska-base
  extends:
    - .image_builder_template
  rules:
    - !reference [.override-jobs-for-schedule, rules]
  variables:
    OCI_IMAGE: ska-python
    BASE_IMAGE_NAME: ska-base

oci-image-build-ska-build-python:
  needs:
    - oci-image-build-ska-build
  extends:
    - .image_builder_template
  rules:
    - !reference [.override-jobs-for-schedule, rules]
  variables:
    OCI_IMAGE: ska-build-python
    BASE_IMAGE_NAME: ska-build

test-ska-base:
  stage: test
  rules:
    - !reference [.override-jobs-for-schedule, rules]
  tags:
    - ska-default
  image: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/ska-base:${CI_COMMIT_SHORT_SHA}
  script:
    - apt-get -o Dir::Etc::sourcelist="secsrc.list" -o Dir::Etc::sourceparts="-" update && apt-get --assume-no upgrade | grep "0 not upgraded."

test-ska-build:
  stage: test
  rules:
    - !reference [.override-jobs-for-schedule, rules]
  image: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/ska-build:${CI_COMMIT_SHORT_SHA}
  script:
    - python3 --version
    - pip help
    - g++ --version
    - python3-config --help

test-ska-node:
  stage: test
  rules:
    - !reference [.override-jobs-for-schedule, rules]
  image: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/ska-node:${CI_COMMIT_SHORT_SHA}
  script:
    - node --version
    - npm --version
    - yarn --version

test-ska-webserver:
  stage: test
  rules:
    - !reference [.override-jobs-for-schedule, rules]
  image: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/ska-webserver:${CI_COMMIT_SHORT_SHA}
  script:
    - node --version
    - nginx -version

scan-ska-python:
  extends:
    - container_scanning
  variables:
    BASE_IMAGE_NAME: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/ska-python:$CI_COMMIT_SHORT_SHA

scan-ska-node:
  extends:
    - container_scanning
  variables:
    BASE_IMAGE_NAME: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/ska-node:$CI_COMMIT_SHORT_SHA

scan-ska-webserver:
  extends:
    - container_scanning
  variables:
    BASE_IMAGE_NAME: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/ska-webserver:$CI_COMMIT_SHORT_SHA

# Using natively on the image as it doesn't understand that is a container and checks Kernel "based"
# vulnerabilites, which gives us extra information on the Host as well
oval-check-ska-base:
  stage: build
  needs:
    - oci-image-build-ska-base
  rules:
    - !reference [.override-jobs-for-schedule, rules]
  image: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/ska-base:$CI_COMMIT_SHORT_SHA
  script: |
    apt-get update && \
    apt-get install -y curl libopenscap8 bzip2 unzip && \
    curl -L "https://security-metadata.canonical.com/oval/com.ubuntu.${UBUNTU_DISTRO}.usn.oval.xml.bz2" -o oval.xml.bz2 && \
    bunzip2 oval.xml.bz2

    mkdir -p build/reports
    oscap oval eval --report build/reports/oval.html oval.xml || true
  artifacts:
    paths:
      - "build/reports/*.html"

# Using Alpine to use the latest OpenSCAP version. This does not throw false positives in terms of detecting
# it as a container
ssg-check-ska-base:
  stage: build
  needs:
    - oci-image-build-ska-base
  rules:
    - !reference [.override-jobs-for-schedule, rules]
  image: alpine:3.21
  script: |
    export TARGET="${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/ska-base:${CI_COMMIT_SHORT_SHA}"

    apk update && apk add bash curl docker openscap-docker unzip && \
    docker pull $TARGET && \
    CAC_LATEST_VERSION=$(curl https://github.com/ComplianceAsCode/content/releases/latest --write-out '%{redirect_url}' | sed "s/.*v//") && \
    curl -L "https://github.com/ComplianceAsCode/content/releases/download/v${CAC_LATEST_VERSION}/scap-security-guide-${CAC_LATEST_VERSION}.zip" -o ssg.zip && \
    unzip -j ssg.zip "scap-security-guide-${CAC_LATEST_VERSION}/ssg-ubuntu${UBUNTU_VERSION}-ds.xml" && \
    mv "ssg-ubuntu${UBUNTU_VERSION}-ds.xml" ds.xml

    mkdir -p build/reports
    oscap-docker image "$TARGET" xccdf eval --report build/reports/standard_profile.html --profile xccdf_org.ssgproject.content_profile_standard ds.xml || true
    oscap-docker image "$TARGET" xccdf eval --report build/reports/cis_level2_profile.html --profile xccdf_org.ssgproject.content_profile_cis_level2_server ds.xml || true
    oscap-docker image "$TARGET" xccdf eval --report build/reports/stig_profile.html --profile xccdf_org.ssgproject.content_profile_stig ds.xml || true
  artifacts:
    paths:
      - "build/reports/*.html"

docs-build:
  variables:
    DOCS_SPHINXOPTS: "-t on_gitlab"
  needs:
    - oval-check-ska-base
    - ssg-check-ska-base
  rules:
    - !reference [.override-jobs-for-schedule, rules]
  script:
    - cp -r build/reports/. docs/src/reports/_static
    - make docs-build html

pages:
  variables:
    DOCS_SPHINXOPTS: "-t on_gitlab"
  needs:
    - oval-check-ska-base
    - ssg-check-ska-base
  rules:
    - !reference [.override-jobs-for-schedule, rules]
  script:
    - cp -r build/reports/. docs/src/reports/_static
    - make docs-build html
    - mv docs/build/html/ public
    - echo "GitLab pages at $CI_PAGES_URL"

deprecate-images:
  stage: schedule
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - poetry install
    - poetry run python scripts/deprecate_harbor_base_images.py
